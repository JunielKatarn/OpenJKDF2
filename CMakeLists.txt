cmake_minimum_required(VERSION 3.20)

if(PLAT_MACOS_X86_64)
    set(CMAKE_OSX_ARCHITECTURES "x86_64")

    set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

    set(GLEW_PATH "/usr/local/opt/glew")
    set(CMAKE_IGNORE_PATH "/opt/homebrew")
    set(CMAKE_IGNORE_PATH "/opt/homebrew/include")
    set(CMAKE_IGNORE_PATH "/opt/homebrew/lib")

    list(APPEND CMAKE_PREFIX_PATH /usr/local)
endif()

# Generated by scripts/increment_version.py to keep Flatpak
# and binary versions all in sync.
include(cmake_modules/version.cmake)
project(OpenJKDF2 VERSION ${OPENJKDF2_PROJECT_VERSION})

# All of our supported platforms
set(PLAT_LINUX_32 FALSE CACHE BOOL "Linux 32-bit target")
set(PLAT_LINUX_64 FALSE CACHE BOOL "Linux 64-bit target")
set(PLAT_MACOS FALSE CACHE BOOL "MacOS target")
set(PLAT_MACOS_X86_64 FALSE CACHE BOOL "MacOS x86_64")
set(PLAT_MINGW_X86_64 FALSE CACHE BOOL "MinGW Win64 target")
set(PLAT_WASM FALSE CACHE BOOL "Emscripten WASM target")
set(PLAT_HOOKS FALSE CACHE BOOL "Hook DLL target")
set(PLAT_MSVC FALSE CACHE BOOL "Windows 64-bit MSVC")
set(PLAT_ANDROID_ARM64 FALSE CACHE BOOL "Android AArch64")
set(PLAT_AUTO FALSE CACHE BOOL "Target the host OS")

# Set PLAT_AUTO if a platform isn't specifically selected
if(NOT PLAT_LINUX_32 AND NOT PLAT_LINUX_64 AND NOT PLAT_MACOS AND NOT PLAT_MACOS_X86_64 AND NOT PLAT_MINGW_X86_64 AND NOT PLAT_WASM AND NOT PLAT_HOOKS AND NOT PLAT_MSVC)
    message("DELETE - SET AUTO!!!!!!!!")
    set(PLAT_AUTO TRUE)
else()
    message("DELETE -NO SET AUTO!!!!")
endif()

# Internal targets: Stuff like OpenGL vs D3D, OpenAL vs null sound, etc
set(TARGET_COMPILE_FREEGLUT FALSE)
set(TARGET_USE_CURL FALSE)
set(TARGET_USE_PHYSFS FALSE)
set(TARGET_USE_BASICSOCKETS FALSE)
set(TARGET_USE_GAMENETWORKINGSOCKETS FALSE)
set(TARGET_USE_LIBSMACKER FALSE)
set(TARGET_USE_LIBSMUSHER FALSE)
set(TARGET_USE_SDL2 FALSE)
set(TARGET_USE_OPENGL FALSE)
set(TARGET_USE_OPENAL FALSE)
set(TARGET_USE_D3D FALSE)
set(TARGET_POSIX FALSE)
set(TARGET_LINUX FALSE)
set(TARGET_MACOS FALSE)
set(TARGET_WIN32 FALSE)
set(TARGET_WASM FALSE)
set(TARGET_ANDROID FALSE)
set(TARGET_ANDROID_ARM64 FALSE)
set(TARGET_HOOKS FALSE)
set(TARGET_NO_BLOBS FALSE)
set(TARGET_CAN_JKGM FALSE)
set(OPENJKDF2_USE_BLOBS FALSE CACHE BOOL "Use blobs")

set(DEBUG_QOL_CHEATS $ENV{DEBUG_QOL_CHEATS})

# Options for compiling
if(DEFINED ENV{OPENJKDF2_NO_ASAN})
    set(OPENJKDF2_NO_ASAN $ENV{OPENJKDF2_NO_ASAN})
else()
    set(OPENJKDF2_NO_ASAN TRUE)
endif()

if(${CMAKE_SYSTEM_NAME} MATCHES "Linux" AND PLAT_AUTO)
    set(PLAT_LINUX_64 TRUE)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin" AND PLAT_AUTO)
    set(PLAT_MACOS TRUE)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Windows" AND PLAT_AUTO)
    set(PLAT_MSVC TRUE)
endif()

# General defs
add_compile_definitions(
    OPENJKDF2_PROJECT_NAME=${PROJECT_NAME}
    OPENJKDF2_PROJECT_VERSION=${PROJECT_VERSION}
    OPENJKDF2_MAJOR_VERSION=${PROJECT_VERSION_MAJOR}
    OPENJKDF2_MINOR_VERSION=${PROJECT_VERSION_MINOR}
    OPENJKDF2_PATCH_VERSION=${PROJECT_VERSION_PATCH}
    OPENJKDF2_TWEAK_VERSION=${PROJECT_VERSION_TWEAK}
    OPENJKDF2_RELEASE_VERSION_STRING=\"v${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}\"
    OPENJKDF2_RELEASE_VERSION_STRING_W=L\"v${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}\"
    OPENJKDF2_RELEASE_COMMIT=\"${OPENJKDF2_RELEASE_COMMIT}\"
    OPENJKDF2_RELEASE_COMMIT_SHORT=\"${OPENJKDF2_RELEASE_COMMIT_SHORT}\"
    OPENJKDF2_RELEASE_COMMIT_W=L\"${OPENJKDF2_RELEASE_COMMIT}\"
    OPENJKDF2_RELEASE_COMMIT_SHORT_W=L\"${OPENJKDF2_RELEASE_COMMIT_SHORT}\"
    QOL_IMPROVEMENTS
)

set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED TRUE)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)

if(PLAT_LINUX_32)
    message( STATUS "Targeting Linux 32-bit" )
    set(BIN_NAME "openjkdf2")
    
    add_definitions(-D_XOPEN_SOURCE=500)
    add_definitions(-D_DEFAULT_SOURCE)

    set(TARGET_USE_PHYSFS TRUE)
    set(TARGET_USE_GAMENETWORKINGSOCKETS TRUE)
    set(TARGET_USE_LIBSMACKER TRUE)
    set(TARGET_USE_LIBSMUSHER TRUE)
    set(TARGET_USE_SDL2 TRUE)
    set(TARGET_USE_OPENGL TRUE)
    set(TARGET_USE_OPENAL TRUE)
    set(TARGET_POSIX TRUE)
    set(TARGET_LINUX TRUE)
    set(TARGET_NO_BLOBS TRUE)
    set(TARGET_CAN_JKGM TRUE)
    set(OPENJKDF2_NO_ASAN TRUE)
    set(TARGET_USE_CURL TRUE)

    if(OPENJKDF2_USE_BLOBS)
        set(TARGET_NO_BLOBS FALSE)
    endif()
    
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -std=c11 -fshort-wchar -Wno-implicit-function-declaration -Wno-unused-variable -Wno-parentheses")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -fshort-wchar -Wno-implicit-function-declaration -Wno-unused-variable -Wno-parentheses")
    add_link_options(-fshort-wchar)

elseif(PLAT_LINUX_64)
    message( STATUS "Targeting Linux 64-bit" )
    set(BIN_NAME "openjkdf2")

    add_definitions(-DARCH_64BIT)
    add_definitions(-D_XOPEN_SOURCE=500)
    add_definitions(-D_DEFAULT_SOURCE)

    set(TARGET_USE_PHYSFS TRUE)
    set(TARGET_USE_GAMENETWORKINGSOCKETS TRUE)
    set(TARGET_USE_LIBSMACKER TRUE)
    set(TARGET_USE_LIBSMUSHER TRUE)
    set(TARGET_USE_SDL2 TRUE)
    set(TARGET_USE_OPENGL TRUE)
    set(TARGET_USE_OPENAL TRUE)
    set(TARGET_POSIX TRUE)
    set(TARGET_LINUX TRUE)
    set(TARGET_NO_BLOBS TRUE)
    set(TARGET_CAN_JKGM TRUE)
    set(OPENJKDF2_NO_ASAN TRUE)
    set(TARGET_USE_CURL TRUE)
    
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -std=c11 -fshort-wchar -Wno-implicit-function-declaration -Wno-unused-variable -Wno-parentheses ")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -fshort-wchar -Wno-implicit-function-declaration -Wno-unused-variable -Wno-parentheses ")
    add_link_options(-fshort-wchar)

elseif(PLAT_MACOS)
    message( STATUS "Targeting MacOS" )
    set(BIN_NAME "openjkdf2-64")

    add_definitions(-DARCH_64BIT)

    # macOS specific options
    set(MACOSX_DEPLOYMENT_TARGET "10.15" CACHE STRING "Minimum OS X deployment version" FORCE)

    set(TARGET_USE_PHYSFS TRUE)
    #set(TARGET_USE_BASICSOCKETS TRUE)
    set(TARGET_USE_GAMENETWORKINGSOCKETS TRUE)
    set(TARGET_USE_LIBSMACKER TRUE)
    set(TARGET_USE_LIBSMUSHER TRUE)
    set(TARGET_USE_SDL2 TRUE)
    set(TARGET_USE_OPENGL TRUE)
    set(TARGET_USE_OPENAL TRUE)
    set(TARGET_POSIX TRUE)
    set(TARGET_MACOS TRUE)
    set(TARGET_NO_BLOBS TRUE)
    set(TARGET_CAN_JKGM TRUE)
    set(TARGET_USE_CURL TRUE)

    set(BUNDLE "${PROJECT_SOURCE_DIR}/OpenJKDF2.app")
    set(HOMEBREW_PREFIX $ENV{HOMEBREW_PREFIX})

    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -std=c11 -O2 -Wuninitialized -fshort-wchar -Wall -Wno-unused-variable -Wno-parentheses -Wno-missing-braces -Wno-implicit-function-declaration")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -fshort-wchar")
    
    add_link_options(-fshort-wchar -Wl,-map,openjkdf2.map)

elseif(PLAT_MACOS_X86_64)
    message( STATUS "Targeting MacOS x86_64 ${CMAKE_OSX_ARCHITECTURES}" )
    set(BIN_NAME "openjkdf2-64")

    add_definitions(-DARCH_64BIT)

    # macOS specific options
    set(MACOSX_DEPLOYMENT_TARGET "10.15" CACHE STRING "Minimum OS X deployment version" FORCE)

    set(TARGET_USE_PHYSFS TRUE)
    set(TARGET_USE_GAMENETWORKINGSOCKETS TRUE)
    set(TARGET_USE_LIBSMACKER TRUE)
    set(TARGET_USE_LIBSMUSHER TRUE)
    set(TARGET_USE_SDL2 TRUE)
    set(TARGET_USE_OPENGL TRUE)
    set(TARGET_USE_OPENAL TRUE)
    set(TARGET_POSIX TRUE)
    set(TARGET_MACOS TRUE)
    set(TARGET_NO_BLOBS TRUE)
    set(TARGET_CAN_JKGM TRUE)
    set(TARGET_USE_CURL TRUE)

    set(BUNDLE "${PROJECT_SOURCE_DIR}/OpenJKDF2_x86_64.app")
    set(HOMEBREW_PREFIX "/usr/local")

    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -std=c11 -O2 -Wuninitialized -fshort-wchar -Wall -Wno-unused-variable -Wno-parentheses -Wno-missing-braces -Wno-implicit-function-declaration")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -fshort-wchar")
    add_link_options(-fshort-wchar)

    #set(ENV{PKG_CONFIG_PATH} "$ENV{PKG_CONFIG_PATH}:${HOMEBREW_PREFIX}/opt/protobuf/lib/pkgconfig")

elseif(PLAT_MINGW_X86_64)
    message( STATUS "Targeting Win64 MinGW" )

    set(BIN_NAME "${PROJECT_NAME}-64")
    string(TOLOWER ${BIN_NAME} BIN_NAME)

    add_compile_definitions(
        WINVER=0x0600 _WIN32_WINNT=0x0600
        WIN64_STANDALONE #TODO: Rename to `WINDOWS_STANDALONE`
        ARCH_64BIT       #TODO: Test `sizeof(void*)` or `_WIN64` instead
        WIN32            #TODO: Test `_WIN32` instead
        WIN64_MINGW      #TODO: Test `_WIN64 && __MINGW32__` or `__MINGW64__` or `_WIN64 && __GNUC__` instead
    )

    if (NOT DEFINED GITHUB_RUNNER_COMPILE)
        set(TARGET_USE_PHYSFS TRUE)
        set(TARGET_USE_GAMENETWORKINGSOCKETS TRUE)
    endif()
    set(OPENJKDF2_NO_ASAN TRUE)
    set(TARGET_USE_LIBSMACKER TRUE)
    set(TARGET_USE_LIBSMUSHER TRUE)
    set(TARGET_USE_SDL2 TRUE)
    set(TARGET_USE_OPENGL TRUE)
    if (NOT DEFINED GITHUB_RUNNER_COMPILE)
        set(TARGET_USE_OPENAL TRUE)
    endif()
    set(TARGET_POSIX TRUE)
    set(TARGET_WIN32 TRUE)
    set(TARGET_NO_BLOBS TRUE)
    set(TARGET_CAN_JKGM TRUE)
    set(TARGET_USE_CURL TRUE)
    set(TARGET_COMPILE_FREEGLUT TRUE)

    add_compile_definitions(main=SDL_main _MBCS)
    # TODO: Bump to O2 eventually. MinGW likes to replace memset with calls to itself...
    add_compile_options(-pthread -Wall -Wno-unused-variable -Wno-parentheses -Wno-missing-braces)
    if(CMAKE_BUILD_TYPE STREQUAL Debug)
        add_compile_options(-Og)
    else()
        add_compile_options(-O2)
    endif()

elseif(PLAT_WASM)
    message( STATUS "Targeting Emscripten WASM" )

    set(BIN_NAME "openjkdf2")

    add_definitions(-DARCH_WASM)

    set(TARGET_USE_PHYSFS FALSE)
    set(OPENJKDF2_NO_ASAN TRUE)
    set(TARGET_USE_LIBSMACKER TRUE)
    set(TARGET_USE_LIBSMUSHER TRUE)
    set(TARGET_USE_SDL2 TRUE)
    set(TARGET_USE_OPENGL TRUE)
    set(TARGET_USE_OPENAL TRUE)
    set(TARGET_POSIX TRUE)
    set(TARGET_NO_BLOBS TRUE)
    set(TARGET_WASM TRUE)
    set(TARGET_CAN_JKGM FALSE)
    set(TARGET_USE_CURL FALSE)

    add_link_options(-fno-exceptions)
    add_compile_options(-fno-exceptions)
    set(USE_FLAGS "-sUSE_SDL=2 -sUSE_SDL_MIXER=2 -sWASM=1 -s ALLOW_MEMORY_GROWTH=1 -sFULL_ES2 -sFULL_ES3 -sUSE_WEBGL2=1 -sASYNCIFY -sINITIAL_MEMORY=200mb -s STACK_SIZE=100mb")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${USE_FLAGS}")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${USE_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${USE_FLAGS} --profiling --preload-file ${PROJECT_SOURCE_DIR}/wasm_out@/ ")
    set(CMAKE_EXECUTABLE_SUFFIX .js)

    add_compile_options(-O2 -Wuninitialized -fshort-wchar -Wall -Wno-unused-variable -Wno-parentheses -Wno-missing-braces)

elseif(PLAT_HOOKS)
    message( STATUS "Targeting MinGW Hooks DLL" )

    set(BIN_NAME "df2_reimpl")

    add_definitions(-DWIN32)
    add_definitions(-DWIN32_BLOBS)
    add_definitions(-DARCH_X86)
    add_definitions(-DTARGET_HAS_DPLAY)

    set(TARGET_HOOKS TRUE)
    set(OPENJKDF2_NO_ASAN TRUE)
    set(TARGET_WIN32 TRUE)
    set(TARGET_USE_D3D TRUE)

    add_compile_options(-g -Wuninitialized -fno-trapping-math)
    add_link_options(-g -Wl,--subsystem,windows -Wl,-Map=% -fno-trapping-math)
elseif(PLAT_ANDROID_ARM64)
    message( STATUS "Targeting Android ARM64" )

    set(BIN_NAME "openjkdf2-armv8a")

    add_definitions(-DTARGET_ANDROID)
    add_definitions(-DLINUX)
    add_definitions(-DSTDSOUND_NULL)

    set(TARGET_USE_PHYSFS FALSE)
    set(OPENJKDF2_NO_ASAN TRUE)
    set(TARGET_USE_LIBSMACKER TRUE)
    set(TARGET_USE_LIBSMUSHER TRUE)
    set(TARGET_USE_SDL2 TRUE)
    set(TARGET_USE_OPENGL TRUE)
    set(TARGET_USE_OPENAL FALSE)
    set(TARGET_POSIX TRUE)
    set(TARGET_NO_BLOBS TRUE)
    set(TARGET_ANDROID TRUE)
    set(TARGET_ANDROID_ARM64 TRUE)
    set(TARGET_CAN_JKGM FALSE)
    set(TARGET_USE_CURL FALSE)

    list(APPEND CMAKE_PREFIX_PATH "${CMAKE_SOURCE_DIR}/lib/glew")
    include_directories(${PROJECT_SOURCE_DIR}/lib/freeglut/include)
    include_directories(${PROJECT_SOURCE_DIR}/lib/glew/include)

    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -std=c11 -fshort-wchar -Wno-implicit-function-declaration -Wno-unused-variable -Wno-parentheses")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -fshort-wchar")
    add_link_options(-fshort-wchar)

elseif(PLAT_MSVC)
    message( STATUS "Targeting Win64 MSVC" )

    set(BIN_NAME "openjkdf2-64")

    add_compile_definitions(WINVER=0x0600 _WIN32_WINNT=0x0600)
    add_compile_definitions(WIN64)
    add_compile_definitions(WIN64_STANDALONE)
    add_compile_definitions(ARCH_64BIT)
    add_compile_definitions(WIN32)

    set(TARGET_USE_PHYSFS FALSE)
    set(TARGET_USE_GAMENETWORKINGSOCKETS TRUE)
    set(OPENJKDF2_NO_ASAN TRUE)
    set(TARGET_USE_LIBSMACKER TRUE)
    set(TARGET_USE_LIBSMUSHER TRUE)
    set(TARGET_USE_SDL2 TRUE)
    set(TARGET_USE_OPENGL TRUE)
    set(TARGET_USE_OPENAL TRUE)
    set(TARGET_POSIX TRUE)
    set(TARGET_WIN32 TRUE)
    set(TARGET_NO_BLOBS TRUE)
    set(TARGET_CAN_JKGM TRUE)
    set(TARGET_USE_CURL FALSE)
    set(TARGET_COMPILE_FREEGLUT TRUE)

    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /std:c11")
endif()

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
endif()

# CMake module paths
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake_modules")
if(TARGET_LINUX OR TARGET_MACOS OR PLAT_MSVC OR TARGET_ANDROID)
    list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake_modules_linux")
endif()

if(TARGET_ANDROID)
    set(OPENAL_INCLUDE_DIR "")
    set(GLEW_INCLUDE_DIRS "")
    set(JSON_Install OFF CACHE INTERNAL "")
    add_subdirectory(${CMAKE_SOURCE_DIR}/3rdparty/json)
elseif(NOT PLAT_MINGW_X86_64 AND NOT PLAT_MSVC AND NOT TARGET_HOOKS AND NOT TARGET_WASM)
    if(TARGET_USE_OPENAL)
        find_package(OpenAL REQUIRED)
    endif()

    set(JSON_Install OFF CACHE INTERNAL "")
    add_subdirectory(${CMAKE_SOURCE_DIR}/3rdparty/json)
else()
    # idk
    set(JSON_Install OFF CACHE INTERNAL "")
    add_subdirectory(${CMAKE_SOURCE_DIR}/3rdparty/json)
endif()

# All of the includes
include_directories(
    ${PROJECT_SOURCE_DIR}/src
    ${PROJECT_SOURCE_DIR}/src/external/libsmacker
    ${PROJECT_SOURCE_DIR}/src/external/libsmusher/src
    ${PROJECT_SOURCE_DIR}/src/external/nativefiledialog-extended
)

if(TARGET_USE_SDL2)
    include_directories(${SDL_INCLUDE_DIRS} ${SDL_MIXER_INCLUDE_DIRS})
endif()

if(TARGET_USE_OPENAL)
    if(NOT OPENAL_COMPILING_FROM_SRC)
        include_directories(${OPENAL_INCLUDE_DIR})
    endif()
endif()

# All of the base sources
file(GLOB SOURCE_FILES ${PROJECT_SOURCE_DIR}/src/*.c
                       ${PROJECT_SOURCE_DIR}/src/*/*.c
                       ${PROJECT_SOURCE_DIR}/src/General/*.cpp
                       ${PROJECT_SOURCE_DIR}/src/Platform/Common/*.c
                       ${PROJECT_SOURCE_DIR}/src/Platform/Common/*.cpp)

# Fcaseopen
file(GLOB FCASEOPEN_SRCS ${PROJECT_SOURCE_DIR}/src/external/fcaseopen/*.c)
list(APPEND SOURCE_FILES ${FCASEOPEN_SRCS})
include_directories(${PROJECT_SOURCE_DIR}/src/external/fcaseopen)

# The rest of the conditional/TARGET_* dependencies
include(cmake_modules/config_platform_deps.cmake)

# globals.c/globals.c/precompiled resources preprocessing.
# This includes selection for most of the files in src/platform/*
include(cmake_modules/precompile_globals.cmake)

#set( CMAKE_VERBOSE_MAKEFILE on )

if(TARGET_ANDROID)
    add_library(${BIN_NAME} SHARED ${SOURCE_FILES})
elseif(NOT TARGET_HOOKS)
    add_executable(${BIN_NAME} ${SOURCE_FILES})
else()
    add_library(${BIN_NAME} SHARED ${SOURCE_FILES})
    add_library("${BIN_NAME}_kvm" SHARED ${SOURCE_FILES})

    SET_TARGET_PROPERTIES(${BIN_NAME} PROPERTIES PREFIX "")
    SET_TARGET_PROPERTIES("${BIN_NAME}_kvm" PROPERTIES PREFIX "")

    target_link_libraries(${BIN_NAME} PRIVATE nlohmann_json::nlohmann_json)
    target_link_libraries(${BIN_NAME}_kvm PRIVATE nlohmann_json::nlohmann_json)
endif()

# TODO byacc and flex

if(TARGET_MACOS)
    set_target_properties(${BIN_NAME} PROPERTIES
      LINK_SEARCH_START_STATIC ON
      LINK_SEARCH_END_STATIC ON
    )
    target_link_libraries(${BIN_NAME} PRIVATE "-framework AppKit")
    target_link_libraries(${BIN_NAME} PRIVATE "-framework Carbon")
    target_link_libraries(${BIN_NAME} PRIVATE "-framework SystemConfiguration")
    target_link_libraries(${BIN_NAME} PRIVATE "-framework CoreAudio")
    target_link_libraries(${BIN_NAME} PRIVATE "-framework AudioToolbox")
    target_link_libraries(${BIN_NAME} PRIVATE "-framework CoreVideo")
    target_link_libraries(${BIN_NAME} PRIVATE "-framework Cocoa")
    target_link_libraries(${BIN_NAME} PRIVATE "-framework Metal")
    target_link_libraries(${BIN_NAME} PRIVATE "-framework CoreHaptics")
    target_link_libraries(${BIN_NAME} PRIVATE "-framework IOKit")
    target_link_libraries(${BIN_NAME} PRIVATE "-framework ForceFeedback")
    target_link_libraries(${BIN_NAME} PRIVATE "-framework GameController")
    target_link_libraries(${BIN_NAME} PRIVATE iconv)

    find_package(PkgConfig REQUIRED)

    if(TARGET_USE_GAMENETWORKINGSOCKETS)
        find_package(OpenSSL REQUIRED)
        target_link_libraries(${BIN_NAME} PUBLIC OpenSSL::Crypto)
    endif()
endif()

if(TARGET_LINUX)
    find_package(PkgConfig REQUIRED)
    pkg_check_modules(GTK3 REQUIRED gtk+-3.0)
    include_directories(${GTK3_INCLUDE_DIRS})
    link_directories(${GTK3_LIBRARY_DIRS})
    add_definitions(${GTK3_CFLAGS_OTHER})

    if(TARGET_USE_CURL)
        pkg_check_modules(LIBCURL REQUIRED libcurl)
        include_directories(${LIBCURL_STATIC_INCLUDE_DIRS})
        link_directories(${LIBCURL_STATIC_LIBRARY_DIRS})
        add_definitions(${LIBCURL_STATIC_CFLAGS_OTHER})
    endif()

    if(TARGET_USE_GAMENETWORKINGSOCKETS)
        add_custom_command(
            TARGET ${BIN_NAME}
            POST_BUILD 
            COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_BINARY_DIR}/GameNetworkingSockets/bin/libGameNetworkingSockets.so ${PROJECT_BINARY_DIR}
        )
    endif()
endif()

if(NOT OPENJKDF2_NO_ASAN)
    #add_compile_options(-fsanitize=address -fsanitize=float-divide-by-zero)
    #add_link_options(-fsanitize=address -fsanitize=float-divide-by-zero)
    
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=address -fsanitize=float-divide-by-zero")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address -fsanitize=float-divide-by-zero")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address -fsanitize=float-divide-by-zero")
    set(SANITIZE_ADDRESS TRUE)
    target_link_libraries(${BIN_NAME} PRIVATE "-static-libsan")

    #add_compile_options(-fsanitize=leak)
    #add_link_options(-fsanitize=leak)
endif()

include(cmake_modules/misc_stdcpp_fs_fix.cmake)

if(PLAT_MINGW_X86_64)
    set_target_properties(${BIN_NAME} PROPERTIES
        ENABLE_EXPORTS FALSE
        WINDOWS_EXPORT_ALL_SYMBOLS FALSE
        # CMake missbehaives here because the PE image version field actually
        # specifies the version of the PE specification the PE image has been
        # built to and has NOTHING to do with the application version.
        # Traditionally, the PE image version has followed the internal release
        # version of Windows. Consequently, becuase the linker is the last tool
        # to build a PE image it is supposed to be the linker who should set
        # the PE image version field.
        VERSION ${CMAKE_SYSTEM_VERSION}
    )
    if(CMAKE_BUILD_TYPE STREQUAL Release OR
       CMAKE_BUILD_TYPE STREQUAL MinSizeRel OR
       CMAKE_BUILD_TYPE STREQUAL RelWithDebInfo)
        # TODO: Implement WinMain() for this to work nicely
        set_target_properties(${BIN_NAME} PROPERTIES WIN32_EXECUTABLE TRUE)
    elseif(CMAKE_BUILD_TYPE STREQUAL Debug)
        set_target_properties(${BIN_NAME} PROPERTIES WIN32_EXECUTABLE FALSE)
    endif()

    target_link_libraries(${BIN_NAME} PRIVATE GLUT::GLUT)
    target_link_libraries(${BIN_NAME} PRIVATE GLEW::glew_s)
    target_link_libraries(${BIN_NAME} PRIVATE mingw32 SDL2main SDL::SDL version imm32 setupapi gdi32 winmm imm32 ole32 oleaut32 shell32 ssp winmm user32 crypt32 advapi32) # SDL2’s peculiarity that you have to link mingw32 before SDL2main
    
    if(TARGET_CAN_JKGM)
        target_link_libraries(${BIN_NAME} PRIVATE PNG::PNG ZLIB::ZLIB)
    endif()

    if (TARGET_USE_OPENAL)
        target_link_libraries(${BIN_NAME} PRIVATE ${SDL_MIXER_DEPS} SDL::Mixer)
        target_link_libraries(${BIN_NAME} PRIVATE OpenAL::OpenAL)
    endif()
    target_link_libraries(${BIN_NAME} PRIVATE nlohmann_json::nlohmann_json)
    if(TARGET_USE_GAMENETWORKINGSOCKETS)
        target_link_libraries(${BIN_NAME} PRIVATE GameNetworkingSockets::GameNetworkingSockets)
    endif()
    if(TARGET_USE_PHYSFS)
        target_link_libraries(${BIN_NAME} PRIVATE PhysFS::PhysFS_s)
    endif()
    target_link_libraries(${BIN_NAME} PRIVATE opengl32 ws2_32 uuid ole32)

    if (TARGET_USE_OPENAL)
        add_custom_command(
            TARGET ${BIN_NAME}
            POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_BINARY_DIR}/openal/bin/OpenAL32.dll ${PROJECT_BINARY_DIR}
        )
    endif()

    add_custom_command(
        TARGET ${BIN_NAME}
        POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/3rdparty/drmingw-0.9.3-win64/bin/exchndl.dll ${PROJECT_BINARY_DIR}
        COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/3rdparty/drmingw-0.9.3-win64/bin/symsrv.dll ${PROJECT_BINARY_DIR}
        COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/3rdparty/drmingw-0.9.3-win64/bin/mgwhelp.dll ${PROJECT_BINARY_DIR}
        COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/3rdparty/drmingw-0.9.3-win64/bin/symsrv.yes ${PROJECT_BINARY_DIR}
    )

    if(TARGET_USE_GAMENETWORKINGSOCKETS)
        add_custom_command(
            TARGET ${BIN_NAME}
            POST_BUILD 
            COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_BINARY_DIR}/GameNetworkingSockets/bin/libGameNetworkingSockets.dll ${PROJECT_BINARY_DIR}
        )
    endif()

elseif(TARGET_HOOKS)
    target_link_libraries(${BIN_NAME} PRIVATE -static-libgcc)
    target_link_libraries("${BIN_NAME}_kvm" PRIVATE -Wl,-e_hook_init -nostartfiles -static -static-libgcc -static-libstdc++)
elseif(TARGET_WASM)
    target_link_libraries(${BIN_NAME} PRIVATE -lm -lSDL2 -lSDL2_mixer -lGL -lGLEW -lopenal)
    target_link_libraries(${BIN_NAME} PRIVATE nlohmann_json::nlohmann_json)
elseif(TARGET_LINUX)
    target_link_libraries(${BIN_NAME} PRIVATE PNG::PNG ZLIB::ZLIB)
    target_link_libraries(${BIN_NAME} PRIVATE SDL2main SDL::SDL SDL::Mixer ${SDL_MIXER_DEPS} GL ${OPENAL_LIBRARY} GLEW::GLEW ${GTK3_LIBRARIES})
     
    if(TARGET_USE_PHYSFS)
        target_link_libraries(${BIN_NAME} PRIVATE PhysFS::PhysFS_s)
    endif()
    if(TARGET_USE_GAMENETWORKINGSOCKETS)
        target_link_libraries(${BIN_NAME} PRIVATE GameNetworkingSockets::GameNetworkingSockets)
    endif()

    target_link_libraries(${BIN_NAME} PRIVATE nlohmann_json::nlohmann_json)
    target_link_libraries(${BIN_NAME} PRIVATE dl) # dlopen, dlsym

    if(TARGET_USE_CURL)
        target_link_libraries(${BIN_NAME} PRIVATE curl)
    endif()
elseif(PLAT_MSVC)
    set_target_properties(${BIN_NAME} PROPERTIES
        ENABLE_EXPORTS FALSE
        WINDOWS_EXPORT_ALL_SYMBOLS FALSE
        # CMake missbehaives here because the PE image version field actually
        # specifies the version of the PE specification the PE image has been
        # built to and has NOTHING to do with the application version.
        # Traditionally, the PE image version has followed the internal release
        # version of Windows. Consequently, becuase the linker is the last tool
        # to build a PE image it is supposed to be the linker who should set
        # the PE image version field.
        VERSION ${CMAKE_SYSTEM_VERSION}
    )
    if(CMAKE_BUILD_TYPE STREQUAL Release OR
       CMAKE_BUILD_TYPE STREQUAL MinSizeRel OR
       CMAKE_BUILD_TYPE STREQUAL RelWithDebInfo)
        # TODO: Implement WinMain() for this to work nicely
        set_target_properties(${BIN_NAME} PROPERTIES WIN32_EXECUTABLE TRUE)
    elseif(CMAKE_BUILD_TYPE STREQUAL Debug)
        set_target_properties(${BIN_NAME} PROPERTIES WIN32_EXECUTABLE FALSE)
    endif()

    set_target_properties(${BIN_NAME} PROPERTIES
      LINK_SEARCH_START_STATIC ON
      LINK_SEARCH_END_STATIC ON
    )
    set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
    set(THREADS_PREFER_PTHREAD_FLAG TRUE)
    find_package(Threads REQUIRED)
    target_link_libraries(${BIN_NAME} PRIVATE -static)
    set(CMAKE_EXE_LINKER_FLAGS "-static-libgcc -static-libstdc++")
    target_link_libraries(${BIN_NAME} PRIVATE Threads::Threads)

    target_link_libraries(${BIN_NAME} PRIVATE GLUT::GLUT)
    target_link_libraries(${BIN_NAME} PRIVATE GLEW::glew_s)
    target_link_libraries(${BIN_NAME} PRIVATE SDL2main SDL::SDL version imm32 setupapi gdi32 winmm imm32 ole32 oleaut32 shell32 winmm user32 crypt32 advapi32) # SDL2’s peculiarity that you have to link mingw32 before SDL2main

    if(TARGET_CAN_JKGM)
        target_link_libraries(${BIN_NAME} PRIVATE PNG::PNG ZLIB::ZLIB)
    endif()

    if (TARGET_USE_OPENAL)
        target_link_libraries(${BIN_NAME} PRIVATE ${SDL_MIXER_DEPS} SDL::Mixer)
        if (OPENAL_COMPILING_FROM_SRC)
            target_link_libraries(${BIN_NAME} PRIVATE OpenAL::OpenAL)
        else()
            target_link_libraries(${BIN_NAME} PRIVATE ${OPENAL_LIBRARIES})
        endif()
    endif()
    target_link_libraries(${BIN_NAME} PRIVATE nlohmann_json::nlohmann_json)
    if(TARGET_USE_GAMENETWORKINGSOCKETS)
        target_link_libraries(${BIN_NAME} PRIVATE GameNetworkingSockets::GameNetworkingSockets)
    endif()
    if(TARGET_USE_PHYSFS)
        target_link_libraries(${BIN_NAME} PRIVATE PhysFS::PhysFS_s)
    endif()
    target_link_libraries(${BIN_NAME} PRIVATE opengl32 ws2_32 uuid ole32)

    if (TARGET_USE_OPENAL)
        add_custom_command(
            TARGET ${BIN_NAME}
            POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_BINARY_DIR}/openal/bin/OpenAL32.dll ${PROJECT_BINARY_DIR}
        )
    endif()

    add_custom_command(
        TARGET ${BIN_NAME}
        POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/3rdparty/drmingw-0.9.3-win64/bin/exchndl.dll ${PROJECT_BINARY_DIR}
        COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/3rdparty/drmingw-0.9.3-win64/bin/symsrv.dll ${PROJECT_BINARY_DIR}
        COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/3rdparty/drmingw-0.9.3-win64/bin/mgwhelp.dll ${PROJECT_BINARY_DIR}
        COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/3rdparty/drmingw-0.9.3-win64/bin/symsrv.yes ${PROJECT_BINARY_DIR}
    )

    if(TARGET_USE_GAMENETWORKINGSOCKETS)
        add_custom_command(
            TARGET ${BIN_NAME}
            POST_BUILD 
            COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_BINARY_DIR}/GameNetworkingSockets/bin/GameNetworkingSockets.dll ${PROJECT_BINARY_DIR}
        )
    endif()

elseif(TARGET_ANDROID)
    target_link_libraries(${BIN_NAME} PRIVATE PNG::PNG)
    target_link_libraries(${BIN_NAME} PRIVATE SDL2main SDL::SDL ${SDL_MIXER_DEPS} SDL::Mixer GLESv1_CM GLESv2 GLESv3 log EGL ${GTK3_LIBRARIES} android jnigraphics nativewindow OpenSLES) #${OPENAL_LIBRARY} GLEW::GLEW
     
    if(TARGET_USE_PHYSFS)
        target_link_libraries(${BIN_NAME} PRIVATE PhysFS::PhysFS_s)
    endif()
    if(TARGET_USE_GAMENETWORKINGSOCKETS)
        target_link_libraries(${BIN_NAME} PRIVATE GameNetworkingSockets::GameNetworkingSockets)
    endif()

    target_link_libraries(${BIN_NAME} PRIVATE nlohmann_json::nlohmann_json)
    target_link_libraries(${BIN_NAME} PRIVATE dl) # dlopen, dlsym

    if(TARGET_USE_CURL)
        target_link_libraries(${BIN_NAME} PRIVATE curl)
    endif()
elseif(TARGET_MACOS)
    if(TARGET_CAN_JKGM)
        target_link_libraries(${BIN_NAME} PRIVATE PNG::PNG ZLIB::ZLIB)
    endif()

    target_link_libraries(${BIN_NAME} PRIVATE SDL2main SDL::SDL ${SDL_MIXER_DEPS} SDL::Mixer ${OPENGL_LIBRARY} ${OPENAL_LIBRARY} GLEW::GLEW)
    target_link_libraries(${BIN_NAME} PRIVATE nlohmann_json::nlohmann_json)

    if(TARGET_USE_PHYSFS)
        target_link_libraries(${BIN_NAME} PRIVATE PhysFS::PhysFS_s)
    endif()
    if(TARGET_USE_GAMENETWORKINGSOCKETS)
        target_link_libraries(${BIN_NAME} PRIVATE GameNetworkingSockets::GameNetworkingSockets)
    endif()

    #
    # macOS post-build packaging
    #
    include(cmake_modules/postcompile_macos.cmake)
else()
    message(FATAL_ERROR "Unknown target! Cannot continue.")
endif()
