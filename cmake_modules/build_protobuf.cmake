set(Protobuf_ROOT ${CMAKE_BINARY_DIR}/protobuf)

# *Replicate* variables generated by `FindProtobuf`
set(Protobuf_FOUND TRUE)
set(Protobuf_VERSION 3.21.12)
set(Protobuf_INCLUDE_DIRS ${Protobuf_ROOT}/include)
set(Protobuf_LIBRARIES protoc protobuf-lite protobuf)
set(Protobuf_PROTOC_LIBRARIES protoc)
set(Protobuf_LITE_LIBRARIES protobuf-lite)
set(Protobuf_LIBRARY protobuf CACHE STRING Protobuf_LIBRARY)
set(Protobuf_LITE_LIBRARY protobuf-lite CACHE STRING Protobuf_LITE_LIBRARY)
set(Protobuf_PROTOC_LIBRARY protoc CACHE STRING Protobuf_PROTOC_LIBRARY)
set(Protobuf_INCLUDE_DIR ${Protobuf_ROOT}/include)
set(Protobuf_PROTOC_EXECUTABLE ${Protobuf_ROOT}/bin/protoc${CMAKE_EXECUTABLE_SUFFIX} CACHE FILEPATH Protobuf_PROTOC_EXECUTABLE)

set(libprotobuf_STATIC_LIBRARY_PATH ${Protobuf_ROOT}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}$CACHE{Protobuf_LIBRARY}${CMAKE_STATIC_LIBRARY_SUFFIX})
set(libprotobuf_SHARED_LIBRARY_PATH ${Protobuf_ROOT}/lib/${CMAKE_SHARED_LIBRARY_PREFIX}$CACHE{Protobuf_LIBRARY}${CMAKE_SHARED_LIBRARY_SUFFIX})
set(libprotobuf_IMPORT_LIBRARY_PATH ${Protobuf_ROOT}/lib/${CMAKE_IMPORT_LIBRARY_PREFIX}$CACHE{Protobuf_LIBRARY}${CMAKE_IMPORT_LIBRARY_SUFFIX})
set(libprotobuf_lite_STATIC_LIBRARY_PATH ${Protobuf_ROOT}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}$CACHE{Protobuf_LITE_LIBRARY}${CMAKE_STATIC_LIBRARY_SUFFIX})
set(libprotobuf_lite_SHARED_LIBRARY_PATH ${Protobuf_ROOT}/lib/${CMAKE_SHARED_LIBRARY_PREFIX}$CACHE{Protobuf_LITE_LIBRARY}${CMAKE_SHARED_LIBRARY_SUFFIX})
set(libprotobuf_lite_IMPORT_LIBRARY_PATH ${Protobuf_ROOT}/lib/${CMAKE_IMPORT_LIBRARY_PREFIX}$CACHE{Protobuf_LITE_LIBRARY}${CMAKE_IMPORT_LIBRARY_SUFFIX})
set(libprotoc_STATIC_LIBRARY_PATH ${Protobuf_ROOT}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}$CACHE{Protobuf_PROTOC_LIBRARY}${CMAKE_STATIC_LIBRARY_SUFFIX})
set(libprotoc_SHARED_LIBRARY_PATH ${Protobuf_ROOT}/lib/${CMAKE_SHARED_LIBRARY_PREFIX}$CACHE{Protobuf_PROTOC_LIBRARY}${CMAKE_SHARED_LIBRARY_SUFFIX})
set(libprotoc_IMPORT_LIBRARY_PATH ${Protobuf_ROOT}/lib/${CMAKE_IMPORT_LIBRARY_PREFIX}$CACHE{Protobuf_PROTOC_LIBRARY}${CMAKE_IMPORT_LIBRARY_SUFFIX})


# *Replicate* targets generated by `FindProtobuf`
if(Protobuf_USE_STATIC_LIBS)
    if(NOT TARGET protobuf::libprotobuf)
        add_library(protobuf::libprotobuf STATIC IMPORTED)
    endif()
    add_dependencies(protobuf::libprotobuf PROTOBUF)
    set_property(
        TARGET protobuf::libprotobuf
        PROPERTY IMPORTED_LOCATION ${libprotobuf_STATIC_LIBRARY_PATH}
    )

    if(NOT TARGET protobuf::libprotobuf-lite)
        add_library(protobuf::libprotobuf-lite STATIC IMPORTED)
    endif()
    add_dependencies(protobuf::libprotobuf-lite PROTOBUF)
    set_property(
        TARGET protobuf::libprotobuf-lite
        PROPERTY IMPORTED_LOCATION ${libprotobuf_lite_STATIC_LIBRARY_PATH}
    )

    if(NOT TARGET protobuf::libprotoc)
        add_library(protobuf::libprotoc STATIC IMPORTED)
    endif()
    add_dependencies(protobuf::libprotoc PROTOBUF)
    set_property(
        TARGET protobuf::libprotoc
        PROPERTY IMPORTED_LOCATION ${libprotoc_STATIC_LIBRARY_PATH}
    )
else()
    if(NOT TARGET protobuf::libprotobuf)
        add_library(protobuf::libprotobuf SHARED IMPORTED)
    endif()
    add_dependencies(protobuf::libprotobuf PROTOBUF)
    set_target_properties(
        protobuf::libprotobuf PROPERTIES
        IMPORTED_LOCATION ${libprotobuf_SHARED_LIBRARY_PATH}
        IMPORTED_IMPLIB   ${libprotobuf_IMPORT_LIBRARY_PATH}
    )

    if(NOT TARGET protobuf::libprotobuf-lite)
        add_library(protobuf::libprotobuf-lite SHARED IMPORTED)
    endif()
    add_dependencies(protobuf::libprotobuf-lite PROTOBUF)
    set_target_properties(
        protobuf::libprotobuf-lite PROPERTIES
        IMPORTED_LOCATION ${libprotobuf_lite_SHARED_LIBRARY_PATH}
        IMPORTED_IMPLIB ${libprotobuf_lite_IMPORT_LIBRARY_PATH}
    )

    if(NOT TARGET protobuf::libprotoc)
        add_library(protobuf::libprotoc SHARED IMPORTED)
    endif()
    add_dependencies(protobuf::libprotoc PROTOBUF)
    set_target_properties(
        protobuf::libprotoc PROPERTIES
        IMPORTED_LOCATION ${libprotobuf_SHARED_LIBRARY_PATH}
        IMPORTED_IMPLIB ${libprotobuf_IMPORT_LIBRARY_PATH}
    )
endif()
target_include_directories(protobuf::libprotobuf INTERFACE ${Protobuf_INCLUDE_DIRS})
target_link_directories(protobuf::libprotobuf INTERFACE ${Protobuf_ROOT}/lib)
target_include_directories(protobuf::libprotobuf-lite INTERFACE ${Protobuf_INCLUDE_DIRS})
target_link_directories(protobuf::libprotobuf-lite INTERFACE ${Protobuf_ROOT}/lib)
target_include_directories(protobuf::libprotoc INTERFACE ${Protobuf_INCLUDE_DIRS})
target_link_directories(protobuf::libprotoc INTERFACE ${Protobuf_ROOT}/lib)

if(PROTOBUF_BUILD_PROTOC_BINARIES)
    if(NOT TARGET protobuf::protoc)
        add_executable(protobuf::protoc IMPORTED)
    endif()
    add_dependencies(protobuf::protoc PROTOBUF)
    set_target_properties(
        protobuf::protoc PROPERTIES
        IMPORTED_LOCATION
        $CACHE{Protobuf_PROTOC_EXECUTABLE}
        IMPORTED_LOCATION_Release
        $CACHE{Protobuf_PROTOC_EXECUTABLE}
        IMPORTED_LOCATION_Debug
        $CACHE{Protobuf_PROTOC_EXECUTABLE}
    )
endif()

ExternalProject_Add(
    PROTOBUF
    SOURCE_DIR             ${CMAKE_SOURCE_DIR}/lib/protobuf
    BINARY_DIR             ${Protobuf_ROOT}
    INSTALL_DIR            ${Protobuf_ROOT}
    UPDATE_DISCONNECTED    TRUE
    CMAKE_ARGS             --toolchain ${CMAKE_TOOLCHAIN_FILE}
                           --install-prefix ${Protobuf_ROOT}
                           -DCMAKE_BUILD_TYPE:STRING=Release
                           -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES}
                           ${PROTOBUF_EXTRA_FLAGS}
                           -DCMAKE_POLICY_DEFAULT_CMP0074:STRING=NEW
                           -DCMAKE_POSITION_INDEPENDENT_CODE=ON
                           -Dprotobuf_BUILD_TESTS:BOOL=FALSE
                           -Dprotobuf_BUILD_SHARED_LIBS:BOOL=FALSE
                           -Dprotobuf_BUILD_CONFORMANCE:BOOL=FALSE
                           -Dprotobuf_BUILD_EXAMPLES:BOOL=FALSE
                           -Dprotobuf_BUILD_PROTOC_BINARIES:BOOL=${PROTOBUF_BUILD_PROTOC_BINARIES}
                           -Dprotobuf_DISABLE_RTTI:BOOL=TRUE
                           -DZLIB_ROOT:PATH=${ZLIB_ROOT}
    DEPENDS                ${PROTOBUF_DEPENDS} # add platform specific zlib depency
    BUILD_BYPRODUCTS       ${libprotobuf_STATIC_LIBRARY_PATH} ${libprotobuf_SHARED_LIBRARY_PATH}
                           ${libprotobuf_lite_STATIC_LIBRARY_PATH} ${libprotobuf_lite_SHARED_LIBRARY_PATH}
                           ${libprotoc_STATIC_LIBRARY_PATH} ${libprotoc_SHARED_LIBRARY_PATH}
                           $CACHE{Protobuf_PROTOC_EXECUTABLE}
)
